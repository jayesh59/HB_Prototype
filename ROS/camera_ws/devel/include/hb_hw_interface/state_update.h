// Generated by gencpp from file hb_hw_interface/state_update.msg
// DO NOT EDIT!


#ifndef HB_HW_INTERFACE_MESSAGE_STATE_UPDATE_H
#define HB_HW_INTERFACE_MESSAGE_STATE_UPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hb_hw_interface
{
template <class ContainerAllocator>
struct state_update_
{
  typedef state_update_<ContainerAllocator> Type;

  state_update_()
    : c_angles()
    , c_velocities()  {
      c_angles.assign(0.0);

      c_velocities.assign(0.0);
  }
  state_update_(const ContainerAllocator& _alloc)
    : c_angles()
    , c_velocities()  {
  (void)_alloc;
      c_angles.assign(0.0);

      c_velocities.assign(0.0);
  }



   typedef boost::array<float, 11>  _c_angles_type;
  _c_angles_type c_angles;

   typedef boost::array<float, 11>  _c_velocities_type;
  _c_velocities_type c_velocities;





  typedef boost::shared_ptr< ::hb_hw_interface::state_update_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hb_hw_interface::state_update_<ContainerAllocator> const> ConstPtr;

}; // struct state_update_

typedef ::hb_hw_interface::state_update_<std::allocator<void> > state_update;

typedef boost::shared_ptr< ::hb_hw_interface::state_update > state_updatePtr;
typedef boost::shared_ptr< ::hb_hw_interface::state_update const> state_updateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hb_hw_interface::state_update_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hb_hw_interface::state_update_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hb_hw_interface::state_update_<ContainerAllocator1> & lhs, const ::hb_hw_interface::state_update_<ContainerAllocator2> & rhs)
{
  return lhs.c_angles == rhs.c_angles &&
    lhs.c_velocities == rhs.c_velocities;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hb_hw_interface::state_update_<ContainerAllocator1> & lhs, const ::hb_hw_interface::state_update_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hb_hw_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hb_hw_interface::state_update_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hb_hw_interface::state_update_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hb_hw_interface::state_update_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hb_hw_interface::state_update_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hb_hw_interface::state_update_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hb_hw_interface::state_update_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hb_hw_interface::state_update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef499ec12d5d495e7c8a49b8fded425f";
  }

  static const char* value(const ::hb_hw_interface::state_update_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef499ec12d5d495eULL;
  static const uint64_t static_value2 = 0x7c8a49b8fded425fULL;
};

template<class ContainerAllocator>
struct DataType< ::hb_hw_interface::state_update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hb_hw_interface/state_update";
  }

  static const char* value(const ::hb_hw_interface::state_update_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hb_hw_interface::state_update_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[11] c_angles #current angle values as output as a result of change in posture due to cmd from ROS.\n"
"float32[11] c_velocities #current velocity values as output as a result of change in velocity of wheels due to cmd from ROS.\n"
;
  }

  static const char* value(const ::hb_hw_interface::state_update_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hb_hw_interface::state_update_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.c_angles);
      stream.next(m.c_velocities);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_update_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hb_hw_interface::state_update_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hb_hw_interface::state_update_<ContainerAllocator>& v)
  {
    s << indent << "c_angles[]" << std::endl;
    for (size_t i = 0; i < v.c_angles.size(); ++i)
    {
      s << indent << "  c_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.c_angles[i]);
    }
    s << indent << "c_velocities[]" << std::endl;
    for (size_t i = 0; i < v.c_velocities.size(); ++i)
    {
      s << indent << "  c_velocities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.c_velocities[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HB_HW_INTERFACE_MESSAGE_STATE_UPDATE_H
