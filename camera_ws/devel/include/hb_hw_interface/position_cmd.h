// Generated by gencpp from file hb_hw_interface/position_cmd.msg
// DO NOT EDIT!


#ifndef HB_HW_INTERFACE_MESSAGE_POSITION_CMD_H
#define HB_HW_INTERFACE_MESSAGE_POSITION_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hb_hw_interface
{
template <class ContainerAllocator>
struct position_cmd_
{
  typedef position_cmd_<ContainerAllocator> Type;

  position_cmd_()
    : angle_cmd()
    , velocity_cmd()  {
      angle_cmd.assign(0.0);

      velocity_cmd.assign(0.0);
  }
  position_cmd_(const ContainerAllocator& _alloc)
    : angle_cmd()
    , velocity_cmd()  {
  (void)_alloc;
      angle_cmd.assign(0.0);

      velocity_cmd.assign(0.0);
  }



   typedef boost::array<float, 11>  _angle_cmd_type;
  _angle_cmd_type angle_cmd;

   typedef boost::array<float, 11>  _velocity_cmd_type;
  _velocity_cmd_type velocity_cmd;





  typedef boost::shared_ptr< ::hb_hw_interface::position_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hb_hw_interface::position_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct position_cmd_

typedef ::hb_hw_interface::position_cmd_<std::allocator<void> > position_cmd;

typedef boost::shared_ptr< ::hb_hw_interface::position_cmd > position_cmdPtr;
typedef boost::shared_ptr< ::hb_hw_interface::position_cmd const> position_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hb_hw_interface::position_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hb_hw_interface::position_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hb_hw_interface::position_cmd_<ContainerAllocator1> & lhs, const ::hb_hw_interface::position_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.angle_cmd == rhs.angle_cmd &&
    lhs.velocity_cmd == rhs.velocity_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hb_hw_interface::position_cmd_<ContainerAllocator1> & lhs, const ::hb_hw_interface::position_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hb_hw_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hb_hw_interface::position_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hb_hw_interface::position_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hb_hw_interface::position_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hb_hw_interface::position_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hb_hw_interface::position_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hb_hw_interface::position_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hb_hw_interface::position_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c27cff7b342ce46d7f949fb78b6703f";
  }

  static const char* value(const ::hb_hw_interface::position_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c27cff7b342ce46ULL;
  static const uint64_t static_value2 = 0xd7f949fb78b6703fULL;
};

template<class ContainerAllocator>
struct DataType< ::hb_hw_interface::position_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hb_hw_interface/position_cmd";
  }

  static const char* value(const ::hb_hw_interface::position_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hb_hw_interface::position_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[11] angle_cmd #cmd to arduino functions that move the arm.\n"
"float32[11] velocity_cmd ##cmd to arduino functions that move wheels.\n"
;
  }

  static const char* value(const ::hb_hw_interface::position_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hb_hw_interface::position_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_cmd);
      stream.next(m.velocity_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hb_hw_interface::position_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hb_hw_interface::position_cmd_<ContainerAllocator>& v)
  {
    s << indent << "angle_cmd[]" << std::endl;
    for (size_t i = 0; i < v.angle_cmd.size(); ++i)
    {
      s << indent << "  angle_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angle_cmd[i]);
    }
    s << indent << "velocity_cmd[]" << std::endl;
    for (size_t i = 0; i < v.velocity_cmd.size(); ++i)
    {
      s << indent << "  velocity_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity_cmd[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HB_HW_INTERFACE_MESSAGE_POSITION_CMD_H
